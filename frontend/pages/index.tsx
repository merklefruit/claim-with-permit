import { ethers } from "ethers";
import Head from "next/head";
import {
    useAccount, useConnect, useContractWrite, useDisconnect, useNetwork, usePrepareContractWrite,
    useSignMessage, useWaitForTransaction
} from "wagmi";
import { InjectedConnector } from "wagmi/connectors/injected";

import { Inter } from "@next/font/google";

import ClaimWithPermit from "../abi/ClaimWithPermit.json";
import ClientSide from "../components/ClientSide";

const inter = Inter({ subsets: ["latin"] });

const claimWithPermitAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const sigUtilsAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";

export default function Home() {
  const { chain, chains } = useNetwork();
  const { address, isConnected } = useAccount();
  const { data: signData, signMessage } = useSignMessage();
  const { connect } = useConnect({ connector: new InjectedConnector() });
  const { disconnect } = useDisconnect();

  const { config } = usePrepareContractWrite({
    address: claimWithPermitAddress,
    abi: ClaimWithPermit.abi,
    functionName: "claim",
  });

  const { data: writeData, write } = useContractWrite(config);

  const { isLoading, isSuccess } = useWaitForTransaction({
    hash: writeData?.hash,
  });

  // NOTE: in a production dapp, this should run in a server, not in the browser
  // @dev uses the verifier's private key to create a signature for the claim
  const createClaimSignature = async (recipient: string) => {};

  // @dev uses the connected wallet to execute the claim transaction
  const executeClaim = async () => {};

  return (
    <>
      <Head>
        <title>Claim with permit</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={inter.className.concat(" px-4 container mx-auto")}>
        <div className="mt-16">
          <h1 className="text-center text-3xl">Claim with Permit</h1>

          <ClientSide>
            <div className="mt-8 flex max-w-md gap-3 mx-auto">
              <div className="mx-auto w-full flex flex-col gap-8">
                <h2 className="text-xl">Step 1:</h2>

                <button
                  type="button"
                  onClick={() => (isConnected ? disconnect() : connect())}
                  className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  {isConnected ? "Disconnect wallet" : "Connect wallet"}
                </button>

                {isConnected && (
                  <div className="text-center">
                    <p className="text-sm">Connected with address:</p>
                    <p className="text-sm">{address}</p>
                    <p className="text-sm">Connected to {chain?.name}</p>
                  </div>
                )}

                <h2 className="text-xl">Step 2:</h2>

                <div className="text-center">
                  <p className="text-sm">Switch to the Foundry network</p>
                  <p className="text-sm">
                    Available chains: {chains?.map((chain) => chain.name)}
                  </p>
                </div>

                <button
                  type="button"
                  className="mt-4 w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm 
                text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none 
                focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Switch network
                </button>
              </div>
            </div>
          </ClientSide>
        </div>
      </main>
    </>
  );
}
